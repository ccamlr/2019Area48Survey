stopT <- strptime(r$boundingBox$time[2], '%Y-%m-%dT%H:%M:%OS', tz="UTC")
dt <- difftime(stopT, startT, units = "secs")
# Print out region information
if (length(r$acousticCategories) > 0) {
cat("Region", regionId, "is", len, "n.miles long, took", dt, "s to steam over and has these categorisations:\n")
cat(r$acousticCategories)
} else {
cat("Region", regionId, "is", len, "n.miles long, took", dt, "s to steam over and has no categorisations.\n")
}
}
url <- paste(baseUrl, '/lsss/regions/region', sep='')
rs <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
for (regionId in rs$id) {
# Get information about the current region
r = fromJSON(content(GET(paste(baseUrl, '/lsss/regions/region/', regionId, sep='')), "text", encoding="UTF-8"))
# Calculate some information about the region
len <- diff(r$boundingBox$vesselDistance)
startT <- strptime(r$boundingBox$time[1], '%Y-%m-%dT%H:%M:%OS', tz="UTC")
stopT <- strptime(r$boundingBox$time[2], '%Y-%m-%dT%H:%M:%OS', tz="UTC")
dt <- difftime(stopT, startT, units = "secs")
# Print out region information
if (length(r$acousticCategories) > 0) {
cat("Region", regionId, "is", len, "n.miles long, took", dt, "s to steam over and has these categorisations:\n")
print(r$acousticCategories)
} else {
cat("Region", regionId, "is", len, "n.miles long, took", dt, "s to steam over and has no categorisations.\n")
}
}
url <- paste(baseUrl, '/lsss/regions/region', sep='')
rs <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
for (regionId in rs$id) {
# Get information about the current region
r = fromJSON(content(GET(paste(baseUrl, '/lsss/regions/region/', regionId, sep='')), "text", encoding="UTF-8"))
# Calculate some information about the region
len <- diff(r$boundingBox$vesselDistance)
startT <- strptime(r$boundingBox$time[1], '%Y-%m-%dT%H:%M:%OS', tz="UTC")
stopT <- strptime(r$boundingBox$time[2], '%Y-%m-%dT%H:%M:%OS', tz="UTC")
dt <- difftime(stopT, startT, units = "secs")
# Print out region information
if (length(r$acousticCategories) > 0) {
cat("Region", regionId, "is", len, "n.miles long, took", dt, "s to steam over and has these categorisations:\n")
print(r$acousticCategories)
} else {
cat("Region", regionId, "is", len, "n.miles long, took", dt, "s to steam over and has no categorisations.\n")
}
}
url <- paste(baseUrl, '/lsss/data/frequencies', sep='')
r <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
require("httr")
require("jsonlite")
baseUrl <- 'http://127.0.0.1:8000'
#############################################
# GET call with no parameters
# What frequencies are available?
# What frequencies are available?
url <- paste(baseUrl, '/lsss/data/frequencies', sep='')
r <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
r
r
r/qe3
r/1e3
url <- paste(baseUrl, '/lsss/data/frequencies', sep='')
r <- fromJSON(content(GET(url), query = list(time = "2017-10-07T08:02:00Z")), "text", encoding="UTF-8")
r <- fromJSON(content(GET(url), query = list(time = "2017-10-07T08:02:00Z"), "text", encoding="UTF-8"))
r
r <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
r/1e3
q = list(time='2017-10-07T08:02:00Z', minDepth=50, maxDepth=55, sv=TRUE)
q
url <- paste0(baseUrl, '/lsss/data/ping', query = q)
q = list(time='2017-10-07T08:02:00Z', minDepth=50, maxDepth=55, sv=TRUE)
r <- fromJSON(content(GET(url, query=q), "text", encoding="UTF-8"))
url <- paste0(baseUrl, '/lsss/data/ping')
q = list(time='2017-10-07T08:02:00Z', minDepth=50, maxDepth=55, sv=TRUE)
r <- fromJSON(content(GET(url, query=q), "text", encoding="UTF-8"))
r
print(r$channels)
print(r$channels$id) # the data for channel 0
print(r$channels$id[1])
print(r$channels[1])
print(r$channels[1,])
url <-paste0(baseUrl, '/lsss/regions/exclusion')
excludeRegion = list(pingNumner = 53800, pingNumber=53900)
POST(url, body = excludeRegion, encode = "json")
excludeRegion = list(pingNumber = 53800, pingNumber=53900)
POST(url, body = excludeRegion, encode = "json")
excludeRegion
excludeRegion = list(pingNumber = 53800, pingNumber=53900)
POST(url, body = excludeRegion, encode = "json")
excludeRegion = list(list(pingNumber = 53800), list(pingNumber=53900))
POST(url, body = excludeRegion, encode = "json")
excludeRegion = list(list(pingNumber = 53800), list(pingNumber=53900))
POST(url, body = excludeRegion, encode = "json")
POST(url, body=excludeRegion, query=list(exclude = FALSE), encode="json")
POST(url, body = excludeRegion, encode = "json")
POST(url, body=excludeRegion, query=list(exclude = FALSE), encode="json")
require("httr")
require("jsonlite")
baseUrl <- 'http://127.0.0.1:8000'
#############################################
# GET call with no parameters
# What frequencies are available?
# What frequencies are available?
url <- paste0(baseUrl, '/lsss/data/frequencies')
r <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
r/1e3
url <- paste0(baseUrl, '/lsss/data/ping')
q = list(time='2017-10-07T08:02:00Z', minDepth=50, maxDepth=55, sv=TRUE)
r <- fromJSON(content(GET(url, query=q), "text", encoding="UTF-8"))
print(r$channels[1,]) # the data for channel 1
url <-paste0(baseUrl, '/lsss/regions/exclusion')
excludeRegion = list(list(pingNumber = 53800), list(pingNumber=53900))
POST(url, body = excludeRegion, encode = "json")
POST(url, body=excludeRegion, query=list(exclude = FALSE), encode="json")
url <- paste0(baseUrl, '/lsss/regions/region')
rs <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
for (regionId in rs$id) {
# Get information about the current region
r = fromJSON(content(GET(paste(baseUrl, '/lsss/regions/region/', regionId, sep='')), "text", encoding="UTF-8"))
# Calculate some information about the region
len <- diff(r$boundingBox$vesselDistance)
startT <- strptime(r$boundingBox$time[1], '%Y-%m-%dT%H:%M:%OS', tz="UTC")
stopT <- strptime(r$boundingBox$time[2], '%Y-%m-%dT%H:%M:%OS', tz="UTC")
dt <- difftime(stopT, startT, units = "secs")
# Print out region information
if (length(r$acousticCategories) > 0) {
cat("Region", regionId, "is", len, "n.miles long, took", dt, "s to steam over and has these categorisations:\n")
print(r$acousticCategories)
} else {
cat("Region", regionId, "is", len, "n.miles long, took", dt, "s to steam over and has no categorisations.\n")
}
}
source('I:/KPH 2019702/Processing/src/EchoviewR_integrate.R', echo=TRUE)
source('I:/KPH 2019702/Processing/src/EchoviewR_integrate.R', echo=TRUE)
source('I:/KPH 2019702/Processing/src/EchoviewR_integrate.R', echo=TRUE)
vessel<-'KPH'
rawdata<-'I:\\KPH 2019702\\EK80'
wd<-paste0('I:\\KPH 2019702\\Processing\\echo-integration\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
START
t in 1:length(START)
(t in 1:length(START))
STOP
vessel<-'KPH'
rawdata<-'I:\\KPH 2019702\\EK80'
wd<-paste0('I:\\KPH 2019702\\Processing\\echo-integration\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
START
STOP
START
STOP
refFile$Date
refFile$Date(START)
refFile$Date(START(1))
refFile$Date(1)
refFile$Date[START[1]]
refFile$Date[START[2]]
for t in (1,5,6)
for (t in 1,5,6)
for (t in 1:5)
t
{}
for (t in 1:5) {}
for (t in 1:5) {t}
t
for (t in 1:5) {print(t)}
list(4,6,7)
(4,6,7)
list(4,6,7)
source('I:/KPH 2019702/Processing/src/EchoviewR_integrate.R', echo=TRUE)
START
STOP
essel<-'KPH'
rawdata<-'I:\\KPH 2019702\\EK80'
wd<-paste0('I:\\KPH 2019702\\Processing\\echo-integration\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
START
STOP
refFile$Associated_rawfile[START[1]]
refFile$Associated_rawfile[STOP[1]]
t=1
time = sub("\\..*", "", gsub(":", "", refFile$Time[START[t]]))
# Make up the date/time in a form suitable for a filename
timestamp<-paste0(gsub("-", "", refFile$Date[START[t]]), 'T', time)
print(paste0('Processing event: ', refFile$Event[START[t]], ' (', timestamp, ')'))
library(stringr)
transectId<-word(refFile$Event[START[t]], -1)
STARTFILE<-grep(refFile$Associated_rawfile[START[t]], raw)
STOPFILE<-grep(refFile$Associated_rawfile[STOP[t]], raw)
rawFiles<-raw[STARTFILE:STOPFILE]
STARTFILE:STOPFILE
STARTFILE
STOPFILE
raw
grep(refFile$Associated_rawfile[START[t]], raw)
t
grep(refFile$Associated_rawfile[START[t]], raw)
grep(refFile$Associated_rawfile[STOP[t]], raw)
refFile$Associated_rawfile[STOP[t]]
transectId
print(paste0('Processing event: ', refFile$Event[START[t]], ' (', timestamp, ')'))
vessel<-'KPH'
rawdata<-'I:\\KPH 2019702\\EK80'
wd<-paste0('I:\\KPH 2019702\\Processing\\echo-integration\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
START
STOP
t
time = sub("\\..*", "", gsub(":", "", refFile$Time[START[t]]))
# Make up the date/time in a form suitable for a filename
timestamp<-paste0(gsub("-", "", refFile$Date[START[t]]), 'T', time)
print(paste0('Processing event: ', refFile$Event[START[t]], ' (', timestamp, ')'))
library(stringr)
transectId<-word(refFile$Event[START[t]], -1)
STARTFILE<-grep(refFile$Associated_rawfile[START[t]], raw)
STOPFILE<-grep(refFile$Associated_rawfile[STOP[t]], raw)
rawFiles<-raw[STARTFILE:STOPFILE]
###Read calibration file
refFile$Associated_rawfile[START[t]]
grep('KH2019702-D20190301-T200846-DK', raw)
grep('KH2019702-D20190301-T200846-DsK', raw)
grep(refFile$Associated_rawfile[START[t]], raw)
vessel<-'KPH'
rawdata<-'I:\\KPH 2019702\\EK80'
wd<-paste0('I:\\KPH 2019702\\Processing\\echo-integration\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
time = sub("\\..*", "", gsub(":", "", refFile$Time[START[t]]))
# Make up the date/time in a form suitable for a filename
timestamp<-paste0(gsub("-", "", refFile$Date[START[t]]), 'T', time)
print(paste0('Processing event: ', refFile$Event[START[t]], ' (', timestamp, ')'))
library(stringr)
transectId<-word(refFile$Event[START[t]], -1)
STARTFILE<-grep(refFile$Associated_rawfile[START[t]], raw)
STOPFILE<-grep(refFile$Associated_rawfile[STOP[t]], raw)
rawFiles<-raw[STARTFILE:STOPFILE]
refFile
refFile$Associated_rawfile
refFile$Associated_rawfile[START]
refFile$Associated_rawfile[START[1]]
START
refFile$Associated_rawfile[START[2]]
vessel<-'KPH'
rawdata<-'I:\\KPH 2019702\\EK80'
wd<-paste0('I:\\KPH 2019702\\Processing\\echo-integration\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
refFile$Associated_rawfile[START[1]]
refFile$Associated_rawfile[START[2]]
raw[2]
pwd
pwd()
cwd()
raw
refFile$Associated_rawfile[START[1]]
grep(refFile$Associated_rawfile[START[1]], raw)
grep('KH2019702-D20190301-T200846-DK', raw)
?grep
grep('KH2019702-D20190301-T200846-DKd', raw)
vessel<-'KPH'
rawdata<-'I:\\KPH 2019702\\EK80'
wd<-paste0('I:\\KPH 2019702\\Processing\\echo-integration\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
START
STOP
t
STARTFILE<-grep(refFile$Associated_rawfile[START[t]], raw)
STOPFILE<-grep(refFile$Associated_rawfile[STOP[t]], raw)
STARTFILE
t<-2
STARTFILE<-grep(refFile$Associated_rawfile[START[t]], raw)
STOPFILE<-grep(refFile$Associated_rawfile[STOP[t]], raw)
grep('KH2019702-D20190301-T200846-DK', raw)
refFile$Associated_rawfile[2]
STARTFILE<-grep(refFile$Associated_rawfile[START[t]], raw)
STARTFILE<-grep(refFile$Associated_rawfile[START[2]], raw)
refFile$Associated_rawfile[START[2]]
tt<-refFile$Associated_rawfile[START[2]]
tt
tt<-refFile$Associated_rawfile[tt
tt
refFile$Associated_rawfile[tt
refFile$Associated_rawfile[tt]
grep(refFile$Associated_rawfile[tt, raw)
grep(refFile$Associated_rawfile[tt], raw)
tt
tt[1]
tt(1)
grep(refFile$Associated_rawfile[factor(tt)], raw)
vessel<-'KPH'
rawdata<-'I:\\KPH 2019702\\EK80'
wd<-paste0('I:\\KPH 2019702\\Processing\\echo-integration\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE,stringsAsFactors=FALSE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
t
t<-1
time = sub("\\..*", "", gsub(":", "", refFile$Time[START[t]]))
# Make up the date/time in a form suitable for a filename
timestamp<-paste0(gsub("-", "", refFile$Date[START[t]]), 'T', time)
print(paste0('Processing event: ', refFile$Event[START[t]], ' (', timestamp, ')'))
library(stringr)
transectId<-word(refFile$Event[START[t]], -1)
STARTFILE<-grep(refFile$Associated_rawfile[START[t]], raw)
STOPFILE<-grep(refFile$Associated_rawfile[STOP[t]], raw)
rawFiles<-raw[STARTFILE:STOPFILE]
grep(refFile$Associated_rawfile[START[t]], raw)
START[t]
refFile$Associated_rawfile[2]
refFile$Associated_rawfile[START[t]]
vessel<-'KPH'
rawdata<-'I:\\KPH 2019702\\EK80'
wd<-paste0('I:\\KPH 2019702\\Processing\\echo-integration\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
t
time = sub("\\..*", "", gsub(":", "", refFile$Time[START[t]]))
# Make up the date/time in a form suitable for a filename
timestamp<-paste0(gsub("-", "", refFile$Date[START[t]]), 'T', time)
print(paste0('Processing event: ', refFile$Event[START[t]], ' (', timestamp, ')'))
library(stringr)
transectId<-word(refFile$Event[START[t]], -1)
STARTFILE<-grep(refFile$Associated_rawfile[START[t]], raw)
STOPFILE<-grep(refFile$Associated_rawfile[STOP[t]], raw)
rawFiles<-raw[STARTFILE:STOPFILE]
rawFiles
source('I:/KPH 2019702/Processing/src/EchoviewR_integrate.R', echo=TRUE)
source('I:/KPH 2019702/Processing/src/EchoviewR_integrate.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
r
r$id
r$units
r$heading
r[1]$heading
View(r)
r[["datasets"]][["heading"]][[1]]
url <- paste0(baseUrl, '/lsss/export/BroadbandTS')
bbts <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
bbts
View(bbts)
url <- paste0(baseUrl, '/lsss/regions/label')
label <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
label
url <- paste0(baseUrl, '/lsss/regions/label')
label <- fromJSON(content(GET(url), "text", encoding="UTF-8"))
label
url <- paste0(baseUrl, '/lsss/regions/label')
label <- fromJSON(content(GET(url, query = list(selected = "true")), "text", encoding="UTF-8"))
label
url <- paste0(baseUrl, '/lsss/regions/label')
label <- fromJSON(content(GET(url, query = list(selected = "true")), "text", encoding="UTF-8"))
label
# Choose your ship: 'MS', 'KPH', 'KJH', or 'CDH'
vessel<-'MS'
###Path to rawdata
if (vessel == 'CDH') {
rawdata<-'D:\\Working\\KRILL\\KRILL2019\\cruise_folders\\CDH2019828\\ACOUSTIC\\EK80\\EK80_RAW_REDUCED'
} else if (vessel == 'KPH') {
rawdata<-'D:\\Working\\KRILL\\KRILL2019\\cruise_folders\\S2019701_PKRONPRINSHAAKON_9566\\ACOUSTIC\\EK80\\EK80_ORIGINALRAWDATA\\EK80DK'
} else if (vessel == 'MS') {
rawdata<-'D:\\Working\\KRILL\\KRILL2019\\cruise_folders\\MS2019999\\ACOUSTIC\\ES80\\ES80_RAWDATA_REDUCED'
} else if (vessel == 'KJH') {
rawdata<-'D:\\Working\\KRILL\\KRILL2019\\cruise_folders\\KJH2019999\\ACOUSTIC\\EK60\\EK60_ORIGINALRAWDATA'
}
wd<-paste0('D:\\Working\\KRILL\\KRILL2019\\data\\echo-integration-2020\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
# Choose your ship: 'MS', 'KPH', 'KJH', or 'CDH'
vessel<-'MS'
###Path to rawdata
if (vessel == 'CDH') {
rawdata<-'D:\\Working\\KRILL\\KRILL2019\\cruise_folders\\CDH2019828\\ACOUSTIC\\EK80\\EK80_RAW_REDUCED'
} else if (vessel == 'KPH') {
rawdata<-'D:\\Working\\KRILL\\KRILL2019\\cruise_folders\\S2019701_PKRONPRINSHAAKON_9566\\ACOUSTIC\\EK80\\EK80_ORIGINALRAWDATA\\EK80DK'
} else if (vessel == 'MS') {
rawdata<-'D:\\Working\\KRILL\\KRILL2019\\cruise_folders\\MS2019999\\ACOUSTIC\\ES80\\ES80_RAWDATA_REDUCED'
} else if (vessel == 'KJH') {
rawdata<-'D:\\Working\\KRILL\\KRILL2019\\cruise_folders\\KJH2019999\\ACOUSTIC\\EK60\\EK60_ORIGINALRAWDATA'
}
wd<-paste0('D:\\Working\\KRILL\\KRILL2019\\data\\echo-integration-2020\\', vessel, '\\')
###Read reference file (Start and stop of transects)
refFile<-read.csv(paste0(wd,'transects.csv'),sep=',', header=TRUE)
###List .raw files
raw<-list.files(rawdata,pattern='.raw$',full.names=TRUE)
###Select the .raw-files associated with a transect
START<-grep('On',as.character(refFile$Event))
STOP<-grep('Off',as.character(refFile$Event))
for (t in 1:length(START)) {
# Turn time into something suitable for a filename
time = sub("\\..*", "", gsub(":", "", refFile$Time[START[t]]))
# Make up the date/time in a form suitable for a filename
timestamp<-paste0(gsub("-", "", refFile$Date[START[t]]), 'T', time)
print(paste0('Processing event: ', refFile$Event[START[t]], ' (', timestamp, ')'))
library(stringr)
transectId<-word(refFile$Event[START[t]], -1)
STARTFILE<-grep(refFile$Associated_rawfile[START[t]], raw)
STOPFILE<-grep(refFile$Associated_rawfile[STOP[t]], raw)
rawFiles<-raw[STARTFILE:STOPFILE]
###Read calibration file
calFile<- paste0(wd,vessel,'_calibration.ecs')
###Read EV-template specific for Cabo
EVtemplate<-paste0(wd,'CCAMLR_SWARM_120kHz_only_', vessel, '.EV')
###Read region definitions if present (for us, these come from LSSS).
evrFile<-paste0(wd, vessel, '.evr')
library(EchoviewR,quietly=TRUE)
EVAppObj=COMCreate('EchoviewCom.EvApplication')
outputEVFile<-paste0(wd, timestamp, '_', vessel, '.ev')
EVFile=EVCreateNew(EVAppObj=EVAppObj,
templateFn=EVtemplate,
EVFileName=outputEVFile,
filesetName="fisheries",
dataFiles=rawFiles,
CloseOnSave = FALSE)$EVFile
EVAddCalibrationFile(EVFile=EVFile, filesetName='fisheries', calibrationFile=calFile)
if (file.exists(evrFile))
EVImportRegionDef(EVFile=EVFile, evrFile=evrFile)
EVSaveFile(EVFile=EVFile)
swarmDetResults=EVSchoolsDetect(EVFile = EVFile,
acoVarName='120 Dilation filter 3x3',
outputRegionClassName = 'aggregation',
deleteExistingRegions = TRUE,
distanceMode = "GPS distance",
maximumHorizontalLink = 15,
maximumVerticalLink = 5,
minimumCandidateHeight = 3,
minimumCandidateLength = 15,
minimumSchoolHeight = 3,
minimumSchoolLength = 15,
dataThreshold = -70)
exportFileName=paste(wd,'krillNASC_', transectId, '_', timestamp, '_', vessel,'.csv',sep='')
EVExportUnderlying(EVFile=EVFile,
variableName="Krill NASC from mean Sv (export here for NASC values)",
pingRange = c(-1, -1),
filePath=exportFileName)
EVAppObj$Quit()
}
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
t
START
START[t]
refFile$Time[START[t]]
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
t
length(START)
# Turn time into something suitable for a filename
time = sub("\\..*", "", gsub(":", "", refFile$Time[START[t]]))
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
setwd("D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src")
setwd("D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src")
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
source('D:/Working/KRILL/KRILL2019/2019Area48SurveyRepo/src/EchoviewR_integrate.R', echo=TRUE)
